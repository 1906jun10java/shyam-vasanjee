-- Selecting all the records in the Emlpoyee table
SELECT * FROM employee;
/
--selecting all the records in empoyee table w/ last name king
select lastname
from employee
where lastname = 'King';
/
--3 seleects all the records in employee table and finds Andrew and replaces REPORTSTO with NULL
SELECT*FROM EMPLOYEE
WHERE FIRSTNAME ='Andrew' AND REPORTSTO IS NULL;
/--4  selects all the records in album that is ordered by descending title
SELECT*FROM
ALBUM
ORDER BY TITLE DESC;
/--selects firstname  and city, from customer and ordered by city
SELECT FIRSTNAME,CITY
FROM CUSTOMER
ORDER BY CITY;
/--Inserts two genre items
INSERT INTO GENRE(GENREID,NAME)VALUES(28,'TRAP');
INSERT INTO GENRE(GENREID,NAME)VALUES(27,'LoFi');
/--insert into two Employees
INSERT INTO EMPLOYEE(EMPLOYEEID,LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,PHONE,FAX,EMAIL)
VALUES(9,'VASANJEE','SHYAM','SOFTWARE ENGINEER',5,TO_DATE(05-04-01,'DD-MM-YY'),TO_DATE(06-01-01, 'DD-MM-YY'),'bawls to the wall 27 circle','Tampa','Florida','Canada',32156,'+1 (407) 582-5566','+1 407 582 5567','thissux@gmail.com');
INSERT INTO EMPLOYEE(EMPLOYEEID,LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,PHONE,FAX,EMAIL)
VALUES(9,'VASANJEE','Taylor','SOFTWARE ENGINEER',5,TO_DATE(05-04-01,'DD-MM-YY'),TO_DATE(06-01-01, 'DD-MM-YY'),'bawls to the wall 27 circle','Tampa','Florida','Canada',32156,'+1 (407) 582-5566','+1 407 582 5567','thissux@gmail.com');
/-- replaces customer id 32 with Robert Walter
UPDATE CUSTOMER
SET FIRSTNAME = 'ROBERT', LASTNAME = 'WALTER'
WHERE CUSTOMERID = 32;
/--replace artist creeedance clearwater revival with ccr
UPDATE ARTIST
SET NAME = 'CCR'
WHERE ARTISTID = 76;
/--orders the the billingadderess by T entries
SELECT*FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';
/--selects all records from invoice and orders totals between 15 to 50
SELECT*FROM INVOICE
WHERE TOTAL BETWEEN 15 AND 50;
/--Delete a record in Customer table where the name is Robert Walter (There may be constraints that rely on this, find out how to resolve them)
SELECT*FROM EMPLOYEE
WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04';
/
SELECT*FROM CUSTOMER;

ALTER TABLE INVOICE 
DROP CONSTRAINT FK_INVOICECUSTOMERID;

DELETE FROM CUSTOMER
WHERE CUSTOMERID =32;
/
-- FUNCTION
--Create a function that returns the current time.
SELECT CURRENT_TIMESTAMP FROM DUAL;
/

SELECT LENGTH(NAME) FROM MEDIATYPE;
-- NUMBER OF CHARACTERS IN EACH TABLE
/
--finds teh average of total from invoice
SELECT AVG(TOTAL)
FROM INVOICE;
/--max unitprice from track
SELECT MAX(UNITPRICE)
FROM TRACK;
/--max total from invoice 
SELECT MAX(TOTAL) FROM INVOICE;
/
--3.3 USER DEFINED FUNCTIONS 
--finds avg price unitprice
CREATE OR REPLACE FUNCTION AVG_PRICE
RETURN NUMBER
IS 
X NUMBER;
BEGIN
    SELECT AVG(UNITPRICE)
    INTO X
    FROM INVOICELINE;
    RETURN X;
END;
/

DECLARE
    B NUMBER;
BEGIN
    B := AVG_PRICE;
    DBMS_OUTPUT.PUT_LINE(B);
END;
/--3.4
--Create a function that returns all employees who were born after 1968.
CREATE OR REPLACE FUNCTION after_1968
RETURN SYS_REFCURSOR
IS my_cursor SYS_REFCURSOR;

BEGIN
    OPEN my_cursor FOR
    SELECT LASTNAME, FIRSTNAME, BIRTHDATE
    FROM EMPLOYEE
    group by LASTNAME, FIRSTNAME, BIRTHDATE
    having min BIRTHDATE > '12-DEC-68';
    ORDER BY birthdate;
    
    return my_cursor
END;
/


DECLARE
AGE SYS_REFCURSOR;
SOME_ID EMPLOYEE.EMPLOYEEID%TYPE;
SOME_LN EMPLOYEE.LASTNAME%TYPE;
SOME_FN EMPLOYEE.FIRSTNAME%TYPE;
SOME_BD EMPLOYEE.BIRTHDATE%TYPE;
BEGIN
    AGE := EMP_AGE;
    LOOP
    FETCH AGE INTO SOME_ID, SOME_LN, SOME_FN, SOME_BD;
    EXIT WHEN AGE%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('ID: '||SOME_ID||', LASTNAME: '||SOME_LN||', FIRSTNAME: '||SOME_FN||', BIRTHDAY:'||SOME_BD);
    END LOOP;
    CLOSE AGE;
END;
/
--4.1
--Create a stored procedure that selects the first and last names of all the employees
CREATE OR REPLACE PROCEDURE SP_GET_EMPNAMES (NAMES OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN NAMES FOR
    SELECT FIRSTNAME, LASTNAME
    FROM EMPLOYEE;
END;
/
--Create a stored procedure that updates the personal information of an employee

DECLARE
    NAMES SYS_REFCURSOR;
    SOME_FIRSTN EMPLOYEE.FIRSTNAME%TYPE;
    SOME_LASTN EMPLOYEE.LASTNAME%TYPE;
BEGIN
    SP_GET_EMPNAMES(NAMES);
    LOOP
    FETCH NAMES INTO SOME_FIRSTN, SOME_LASTN;
    EXIT WHEN NAMES%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('FIRSTNAME: '||SOME_FIRSTN||', LASTNAME: '||SOME_LASTN);
    END LOOP;
    CLOSE NAMES;
END; 
/
--4.2
--Create a stored procedure that updates the personal information of an employee.

CREATE OR REPLACE PROCEDURE SP_UPDATE_EMPLOYEE (EMPLOYEE_ID IN NUMBER, SOME_FN IN VARCHAR2, SOME_LN IN VARCHAR2)
IS
BEGIN
    UPDATE EMPLOYEE
    SET LASTNAME = SOME_LN, FIRSTNAME = SOME_FN
    WHERE EMPLOYEE = EMPLOYEE_ID;
    COMMIT;
END; 
/
--Create a stored procedure that returns the managers of an employee.
CREATE OR REPLACE PROCEDURE SP_GET_MANAGER (EMPLOYEE_ID IN NUMBER, MANAGER_ID OUT NUMBER)
IS 
BEGIN
    SELECT REPORTSTO
    INTO MANAGER_ID
    FROM EMPLOYEE
    WHERE EMPLOYEEID = EMPLOYEE_ID;
END;
/
--4.3
--Create a stored procedure that returns the name and company of a customer
CREATE OR REPLACE PROCEDURE SP_GET_CUSTOMER (CUST OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN CUST FOR
    SELECT FIRSTNAME, LASTNAME, COMPANY
    FROM CUSTOMER;
END;
/

DECLARE
    CUST SYS_REFCURSOR;
    SOME_FIRSTN CUSTOMER.FIRSTNAME%TYPE;
    SOME_LASTN CUSTOMER.LASTNAME%TYPE;
    SOME_COMP CUSTOMER.COMPANY%TYPE;
BEGIN
    SP_GET_CUSTOMER(CUST);
    LOOP
    FETCH CUST INTO SOME_FIRSTN, SOME_LASTN, SOME_COMP;
    EXIT WHEN CUST%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('FIRSTNAME: '||SOME_FIRSTN||', LASTNAME: '||SOME_LASTN||', COMPANY: '||SOME_COMP);
    END LOOP;
    CLOSE CUST;
END; 
/
--5.0
--Create a transaction that given a invoiceId will delete that invoice
CREATE OR REPLACE PROCEDURE DELETE_INVOICE (INV_ID IN NUMBER)
IS
BEGIN
    EXECUTE IMMEDIATE 'ALTER TABLE INVOICELINE 
    DROP CONSTRAINT FK_INVOICELINEINVOICEID';
    DELETE INVOICE WHERE INVOICEID = INV_ID;
    COMMIT; 
END;
/
CREATE OR REPLACE PROCEDURE DELETE_INVOICE (INV_ID IN NUMBER)
IS
BEGIN
    EXECUTE IMMEDIATE 'ALTER TABLE INVOICELINE 
    DROP CONSTRAINT FK_INVOICELINEINVOICEID';
    DELETE INVOICE WHERE INVOICEID = INV_ID;
    COMMIT; 
END;
/
--6.1
--Create an after insert trigger on the employee table fired after a new record is inserted into the table
CREATE OR REPLACE TRIGGER TR_EMPLOYEE
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
    SELECT SQ.EMPLOYEE_PK.NEXTVAL INTO :NEW.EMPLOYEEID FROM DUAL;
END; 
/
--
CREATE SEQUENCE SQ_ALBUM_PK
START WITH 1000
INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TR_ALBUM
AFTER UPDATE ON ALBUM
FOR EACH ROW
BEGIN
    SELECT SQ_ALBUM_PK.NEXTVAL INTO :NEW.ALBUMID FROM DUAL;
END;
/
CREATE SEQ SQ_CAR_PK
START WITH 1
INCREMENT BY 1;
/
SELECT*FROM CAR;
/
SELECT * FROM CAR;
/
